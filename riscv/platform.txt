
# Arduino MBED Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=Arduino nRF528x Boards (Mbed OS)
version=1.0.6

# Compile variables
# ------------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={build.compiler_path}
compiler.c.cmd={build.crossprefix}gcc
compiler.c.flags=-march=rv32imac -mabi=ilp32 -Os -ggdb -I. -I{build.core.path}/syscallable -I{build.core.path}/lodepng -I{build.core.path}/UGUI -I{build.core.path}/usb -I{build.core.path}/gloss -I{build.core.path}/tinyusb/src -I{build.core.path}/fatfs/source -I{build.core.path}/../tinyusb/src -I../ -I{build.core.path}/yxml -c -MMD
compiler.c.elf.cmd={build.crossprefix}g++
compiler.c.elf.flags=-march=rv32imac -mabi=ilp32 -ffreestanding -nostartfiles -Wl,--gc-section -Wl,-Bstatic -Wl,-melf32lriscv -Wl,-T,{build.core.path}/gloss/ldscript.ld -Lgloss -lm -lgcc -Lipl
compiler.S.cmd={build.crossprefix}gcc
compiler.S.flags=-march=rv32imac -mabi=ilp32 -c
compiler.cpp.cmd={build.crossprefix}g++
compiler.cpp.flags=-march=rv32imac -mabi=ilp32 -Os -ggdb -I{build.core.path}/syscallable -I{build.core.path}/lodepng -I{build.core.path}/UGUI -I{build.core.path}/usb -I{build.core.path}/gloss -I{build.core.path}/tinyusb/src -I{build.core.path}/fatfs/source -I{build.core.path}/../tinyusb/src -I../ -I{build.core.path}/yxml -c -MMD
compiler.ar.cmd={build.crossprefix}ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd={build.crossprefix}objcopy
#compiler.ldflags={build.core.path}/gloss/libgloss.a {build.core.path}/libipl.a
compiler.ldflags={build.core.path}/gloss/libgloss.a {build.core.path}/libipl.a
compiler.libraries.ldflags=
compiler.size.cmd={build.crossprefix}size
compiler.define=-DARDUINO=

# this can be overriden in boards.txt
build.extra_flags=
build.extra.startobjects=
build.extra.endobjects=
compiler.mbed=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=


# USB Flags
# ---------
build.usb_flags=

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"

build.zip.pattern={recipe.size.pattern}

# Linux compile patterns
# -----------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch}  {build.extra_flags} {compiler.c.extra_flags} "-I{build.core.path}/api/deprecated" {includes} "-iprefix{build.core.path}" -o "{object_file}" "{source_file}"

recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch}  {build.extra_flags} {compiler.S.extra_flags} "-I{build.core.path}/api/deprecated" {includes} "-iprefix{build.core.path}" -o "{object_file}" "{source_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {includes} {build.extra_flags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-iprefix{build.core.path}" "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--whole-archive "{build.path}/{archive_file}" -Wl,--no-whole-archive  -Wl,--start-group {compiler.ldflags} -Wl,--end-group -Wl,--wrap=_exit

## Create eeprom
recipe.objcopy.eep.pattern=

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*
recipe.size.regex=^(?:\.data|\.text)\s+([0-9]+).*

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

# Uploader tools
# ---------------------

tools.openocd.path={runtime.tools.openocd-0.10.0-arduino9.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern="{path}/{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.erase.params.verbose=-d2
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; {bootloader.extra_action.preflash}; program {{runtime.platform.path}/bootloaders/{bootloader.file}}; reset run; shutdown"

#
# BOSSA
#
tools.bossac.path={runtime.tools.bossac-1.9.1-arduino1.path}
tools.bossac.cmd=bossac
tools.bossac.cmd.windows=bossac.exe

tools.bossac.upload.params.verbose=-d
tools.bossac.upload.params.quiet=
tools.bossac.upload.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U -i -e -w "{build.path}/{build.project_name}.bin" -R

# STM32FLASH
tools.stm32flash.cmd=stm32flash
tools.stm32flash.path={runtime.platform.path}/tools/windows
tools.stm32flash.path.macosx={runtime.platform.path}/tools/macosx
tools.stm32flash.path.linux={runtime.platform.path}/tools/linux
tools.stm32flash.upload.params.verbose=-v
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.program.params.verbose=-v
tools.stm32flash.program.params.quiet=
tools.stm32flash.program.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.erase.params.verbose=-v
tools.stm32flash.erase.params.quiet=
tools.stm32flash.erase.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400
